{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Documents\\\\DH\\\\Bimestre_3\\\\Front3\\\\fe3-final\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext();\n\nconst themeReducer = (state, action) => {\n  switch (action.type) {\n    case 'DARK':\n      return initialState.theme.dark;\n\n    case 'LIGTH':\n      return initialState.theme.ligth;\n\n    default:\n      throw new Error();\n  }\n};\n\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [themeState, themeDispatch] = useReducer(themeReducer, initialState); //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      themeState,\n      themeDispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"g1Vv2YgI/tyVMz5e31wBw5JMvuE=\");\n\n_c = ContextProvider;\nexport default ContextProvider;\nexport const useTheme = () => {\n  _s2();\n\n  return useContext(ContextGlobal);\n};\n\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useContext","useReducer","initialState","theme","data","ContextGlobal","themeReducer","state","action","type","dark","ligth","Error","ContextProvider","children","themeState","themeDispatch","useTheme"],"sources":["C:/Users/Lenovo/Documents/DH/Bimestre_3/Front3/fe3-final/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useContext, useReducer } from \"react\";\r\n\r\n\r\nexport const initialState = \r\n{\r\n  theme: \"\",\r\n  data: []\r\n  }\r\n\r\nexport const ContextGlobal = createContext();\r\n\r\nconst themeReducer = (state,action) => {\r\n    switch (action.type){\r\n      case 'DARK': \r\n        return initialState.theme.dark\r\n      case 'LIGTH':\r\n        return initialState.theme.ligth\r\n\r\n      default: \r\n      throw new Error()\r\n\r\n    }\r\n}\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n\r\n  const [themeState, themeDispatch] = useReducer(themeReducer, initialState)\r\n\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{themeState, themeDispatch}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n\r\nexport default ContextProvider\r\nexport const useTheme = () => useContext(ContextGlobal)\r\n"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,UAApC,QAAsD,OAAtD;;AAGA,OAAO,MAAMC,YAAY,GACzB;EACEC,KAAK,EAAE,EADT;EAEEC,IAAI,EAAE;AAFR,CADO;AAMP,OAAO,MAAMC,aAAa,gBAAGN,aAAa,EAAnC;;AAEP,MAAMO,YAAY,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;EACnC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,MAAL;MACE,OAAOP,YAAY,CAACC,KAAb,CAAmBO,IAA1B;;IACF,KAAK,OAAL;MACE,OAAOR,YAAY,CAACC,KAAb,CAAmBQ,KAA1B;;IAEF;MACA,MAAM,IAAIC,KAAJ,EAAN;EAPF;AAUH,CAXD;;AAaA,OAAO,MAAMC,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAE/C,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,UAAU,CAACK,YAAD,EAAeJ,YAAf,CAA9C,CAF+C,CAI/C;;EAEA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACa,UAAD;MAAaC;IAAb,CAA/B;IAAA,UACGF;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAXM;;GAAMD,e;;KAAAA,e;AAab,eAAeA,eAAf;AACA,OAAO,MAAMI,QAAQ,GAAG;EAAA;;EAAA,OAAMjB,UAAU,CAACK,aAAD,CAAhB;AAAA,CAAjB;;IAAMY,Q"},"metadata":{},"sourceType":"module"}